{
    "project": {
        "name": "protobone",
        "description": "Backbone-inspired PrototypeJS addition to provide syncable Models (the 'M' in 'MVC')",
        "version": "0.0.4",
        "url": "https://github.com/bylexus/protobone.git"
    },
    "files": {
        "src/Base.js": {
            "name": "src/Base.js",
            "modules": {},
            "classes": {
                "Protobone.Base": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Collection.js": {
            "name": "src/Collection.js",
            "modules": {},
            "classes": {
                "Protobone.Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Model.js": {
            "name": "src/Model.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/statics.js": {
            "name": "src/statics.js",
            "modules": {},
            "classes": {
                "Protobone.Model": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Protobone.Base": {
            "name": "Protobone.Base",
            "shortname": "Protobone.Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Base.js",
            "line": 1,
            "description": "Base class for Protobone classes. Shared functions which are needed in all classes. This class is not\nmeant to be instantiated by itself.",
            "author": "Alexander Schenkel <alex@alexi.ch>",
            "copyright": "2015 Alexander Schenkel",
            "license": "Released under the MIT License",
            "is_constructor": 1
        },
        "Protobone.Collection": {
            "name": "Protobone.Collection",
            "shortname": "Protobone.Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Collection.js",
            "line": 1,
            "description": "PrototypeJS Model extension - Enables Prototype JS users to fetch / store\nModels from / to a backend using AJAX / REST.\nThe Collection class stores Models and allows storing / fetching them in a batch.\n\nInspired by (but not copied) [Backbone's Backbone.Collection](http://backbonejs.org/) and Backbone.sync",
            "author": "Alexander Schenkel <alex@alexi.ch>",
            "copyright": "2015 Alexander Schenkel",
            "license": "Released under the MIT License",
            "extends": "Protobone.Base",
            "is_constructor": 1
        },
        "Protobone.Model": {
            "name": "Protobone.Model",
            "shortname": "Protobone.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/statics.js",
            "line": 1,
            "description": "PrototypeJS Model extension - Enables Prototype JS users to fetch / store\nModels from / to a backend using AJAX / REST\n\nInspired by (but not copied) Backbone's Backbone.Model and Backbone.sync",
            "author": "Alexander Schenkel <alex@alexi.ch>",
            "copyright": "2015 Alexander Schenkel",
            "license": "Released under the MIT License",
            "extends": "Protobone.Base",
            "is_constructor": 1,
            "see": [
                "http://backbonejs.org/\n\nThis is the static sync method (analog Backbone.sync)",
                "which does the server\ncommunication. If you want to implement your own method",
                "e.g. if you have another\nbackend interface",
                "or even want to use local storage",
                "override Protobone.Model.sync with your own implementation."
            ]
        }
    },
    "classitems": [
        {
            "file": "src/Base.js",
            "line": 16,
            "description": "Registers an event handler.\nIt does not check on duplicity, so you can add the same event\nhandler multiple times.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event, e.g. 'updated'",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function, called with event-specific {parameters}",
                    "type": "Function"
                },
                {
                    "name": "this",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Protobone.Base"
        },
        {
            "file": "src/Base.js",
            "line": 34,
            "description": "Removes a specific event handler for an event, or removes\nall listerners from an event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "E.g. 'updated'",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to remove. If omitted, all callbacks\n  for a specific event are removed",
                    "type": "Function"
                },
                {
                    "name": "this",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Protobone.Base"
        },
        {
            "file": "src/Base.js",
            "line": 60,
            "description": "Fires an event, informing all listneners that are registered for\nthe given event name. The fireEvent function can be called with\nany number of additional arguments, which are then passed to the event\nhandler function.\n\nReturns true if NONE of the registered handlers return false: As soon as\none listener returns false, fireEvent will also return false.",
            "itemtype": "method",
            "name": "fireEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event to fire, e.g. 'updated'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true when non of the listeners returned false, false if they do so.",
                "type": "Boolean"
            },
            "class": "Protobone.Base"
        },
        {
            "file": "src/Collection.js",
            "line": 20,
            "description": "The URL root for this Collection. Must be set in child classes,\ne.g. to '/entities/Person', or must be defined in the defined Model.\n\nUsed by the url() function to build the persistence URL.",
            "itemtype": "property",
            "name": "urlRoot",
            "type": "String",
            "class": "Protobone.Collection"
        },
        {
            "file": "src/Collection.js",
            "line": 33,
            "description": "Constructor. A data array can be delivered to create Models already during\nconstruction time (e.g. `[{name: 'alex'},{name: 'barbara'}]`)",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "data",
                    "description": "Initial data (array of key/value pairs) to create Model's from",
                    "type": "Array"
                }
            ],
            "class": "Protobone.Collection"
        },
        {
            "file": "src/Collection.js",
            "line": 51,
            "description": "The add method takes a Model or an array of Models and adds them to the\ninternal collection. Plain objects can also be delivered, which will be\ntransformed to Prototype.Model instances or, if set, to models of the `this.model` class.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "{Object}",
                    "description": "data The array / object of model(s) to be added",
                    "type": "Array"
                }
            ],
            "class": "Protobone.Collection"
        },
        {
            "file": "src/Model.js",
            "line": 36,
            "description": "Defines the name of the ID attribute. Defaults to `id`.",
            "itemtype": "property",
            "name": "id",
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 43,
            "description": "The URL root for this Model. Must be set in child classes,\ne.g. to '/entities/Person'.\nUsed by the url() function to build the persistence URL.",
            "itemtype": "property",
            "name": "urlRoot",
            "type": "String",
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 53,
            "description": "Used by the parse() function, it defines the root property\nin the server's json response which contains the\npayload data for the model. Defaults to null (delivered json\ndirectly contains model attributes)",
            "itemtype": "property",
            "name": "rootProperty",
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 63,
            "description": "Constructor. Sets the given data (key/value pairs)\nas attributes on new model instances.",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "data",
                    "description": "Initial data (key/value pairs) to set on the new Model instance, e.g.: `{name: 'Alex',age: 26}`",
                    "type": "Object"
                }
            ],
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 75,
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 81,
            "description": "Returns the instance's ID of the model. Null means it is a new, not saved\ninstance.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The ID (int, string), if any",
                "type": "Mixed"
            },
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 92,
            "description": "Sets the Model instance's ID. It also sets it as attribute\nvalue so that it is sent to the server when synced.",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "id",
                    "description": "The id to set (e.g. an integer, or even a string)",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Supports fluent interface by returning itself",
                "type": "This"
            },
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 106,
            "description": "Sets Model attributes (key/values). Takes either a key and a value,\nor a plain object containing key/value pairs.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "/Object",
                    "description": "keyOrObject A string representing the key (e.g. 'name')\n   or an object with key/values (e.g. 'name':'alex','age':'too old')",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set if keyOrObject is a string. Ignored when keyOrObject is an object.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Supports fluent interface by returning itself",
                "type": "This"
            },
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 130,
            "description": "Sets a single Model attribute (e.g. 'name' to 'Alex'). Internal helper function.\nPlease use set() instead.",
            "params": [
                {
                    "name": "key",
                    "description": "The key of the attribute to set, e.g. 'name'",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Supports fluent interface by returning itself",
                "type": "This"
            },
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 154,
            "description": "Returns a specific attribute, or all if key is omitted",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the attribute to get. If omitted, an object\n   containing all attributes (key/value) is returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the requested attribute, or an object with all attributes",
                "type": "Mixed"
            },
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 173,
            "description": "Creates the REST url for the actual state of the Model. Override this\nmethod if you want to implement your own URL scheme. Here is how it works\nby default:\n\n- non-persistent state (id = null): return '<urlRoot>'\n- persistent state (id <> null): return '<urlRoot>/<id>'",
            "itemtype": "method",
            "name": "url",
            "return": {
                "description": "The URL for this Model instance, e.g. `/root/Entity/3`",
                "type": "String"
            },
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 194,
            "description": "Makes this model persistent by sending the data to a REST interface (by default).\nMake sure to set the urlRool property on class definition.\n\noptions are all options that Prototype's Ajax.Request understands, so you\ncan e.g. deliver a onSuccess callback:\n\n```javascript\nmyModel.save({onSuccess: function(response,model){\n    // do something after save here\n}});\n```",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "options",
                    "description": "Additional Ajax options to be sent to Ajax.Request.",
                    "type": "Object"
                }
            ],
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 217,
            "description": "Fetches this Model's representation from the server. Only\nallowed for existing (id <> null) models. options is passed\nalong to Prototype's Ajax.Request function.",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "options",
                    "description": "Additional Ajax options to be sent to Ajax.Request.",
                    "type": "Object"
                }
            ],
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 234,
            "description": "invokes a delete request to the server.  Only\nallowed for existing (id <> null) models. options is passed\nalong to Prototype's Ajax.Request function.\n\nAfter the deletion was successful, the model instance is updated with the\nserver data, even if the server removed the instance.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "options",
                    "description": "Additional Ajax options to be sent to Ajax.Request.",
                    "type": "Object"
                }
            ],
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 254,
            "description": "internal helper function for initiating the requests for save, fetch, destroy",
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 275,
            "description": "Just calls Protobone.Model.sync. If you want your own, Model-specific implementation,\noverride this function.",
            "see": [
                "Protobone.Model.sync. Also here: inspired by http://backbonejs.org/#Sync"
            ],
            "itemtype": "method",
            "name": "sync",
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 286,
            "description": "Called by save() and fetch() with the server's data response. Fills in the\nserver response to the model. In the default implementation, it just\ntakes the plain JSON object from the server (if any) and store the values on the model.\nif `rootProperty`is set, the data entry point is set to the rootProperty data.",
            "itemtype": "method",
            "name": "parse",
            "class": "Protobone.Model"
        },
        {
            "file": "src/Model.js",
            "line": 304,
            "description": "Checks if the model has a certain attribute.",
            "itemtype": "method",
            "name": "hasAttribute",
            "params": [
                {
                    "name": "key",
                    "description": "The attribute name to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Protobone.Model"
        },
        {
            "file": "src/statics.js",
            "line": 39,
            "description": "If set to true, only use GET (read) and POST (create,update,delete) HTTP\nMethods, and set the X-HTTP-Method-Override request header with the\ntrue method.\n\nNOTE: TODO: At the moment, only legacy methods (GET/POST) are supported (emulateHTTP: true),\nbecause the Prototype JS library does NOT support other requests than POST/GET.\nSo set emulateHTTP to false does not change a thing, unfortunately...",
            "itemtype": "property",
            "name": "emulateHTTP",
            "type": "{Boolean}",
            "class": "Protobone.Model"
        },
        {
            "file": "src/statics.js",
            "line": 53,
            "description": "TODO: Implement emulateJSON to use a post body instead of RAW json",
            "itemtype": "property",
            "name": "emulateJSON",
            "type": "{Boolean}",
            "class": "Protobone.Model"
        },
        {
            "file": "src/statics.js",
            "line": 61,
            "description": "This method is where the real server communication happens. It uses\nPrototype's Ajax.Request to send / load data to/from a REST backend.\nIt is called in a static context (`Protobone.Model.sync`) from a Model's instance\nand can be overridden if you have to implement your own storage backend (e.g. localstore)\nor an incompatible API.\n\nThe default method uses the following HTTP methods\n\n* method: create -> `POST /collection`\n* method: read   -> `GET  /collection[/id]`\n* method: update -> `POST /collection/id` (Request Header: `X-HTTP-Method-Override: put`)\n* method: delete -> `POST /collection/id` (Request Header: `X-HTTP-Method-Override: delete`)",
            "itemtype": "method",
            "name": "sync",
            "params": [
                {
                    "name": "url",
                    "description": "The URL for the request",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "The HTTP method. Only supported at the moment: 'get', 'post' (as of Prototype's limitation)",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "A model instance to be sent / updated to /from the server",
                    "type": "Protobone.Model"
                },
                {
                    "name": "options",
                    "description": "Additional Ajax.Request options",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "Protobone.Model"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: copyright",
            "line": " src/Base.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/Base.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/Collection.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/Collection.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/Model.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/Model.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/statics.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/statics.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/Model.js:75"
        },
        {
            "message": "Missing item type\nSets a single Model attribute (e.g. 'name' to 'Alex'). Internal helper function.\nPlease use set() instead.",
            "line": " src/Model.js:130"
        },
        {
            "message": "Missing item type\ninternal helper function for initiating the requests for save, fetch, destroy",
            "line": " src/Model.js:254"
        }
    ]
}